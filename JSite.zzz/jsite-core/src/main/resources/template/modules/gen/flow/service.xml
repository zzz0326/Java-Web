<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/java/${packageName}/${moduleName}/service/${subModuleName}</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2017-2019 <a href="https://gitee.com/lruijun/JSite">JSite</a> All rights reserved.
 */
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>;

import com.google.common.collect.Maps;
import com.jsite.common.lang.StringUtils;
import com.jsite.common.service.CrudService;
import com.jsite.modules.flowable.service.FlowTaskService;
import com.jsite.modules.flowable.utils.FlowableUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.Map;

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao;

/**
 * ${functionName}Service
 * @author liuruijun
 * @version ${functionVersion}
 */
@Service
@Transactional(readOnly = true)
public class ${ClassName}Service extends CrudService<${ClassName}Dao, ${ClassName}> {

	@Autowired
	private FlowTaskService actTaskService;

	@Transactional(readOnly = false)
	public String save(${ClassName} ${className}, Map<String, Object> variables) {
		String businessTable = FlowableUtils.getBusinessTable("${className}");
		if (StringUtils.isBlank(businessTable)) {
		    return "流程启动失败，请先设置业务表";
        }

		// 申请发起 保存业务数据
		if (StringUtils.isBlank(${className}.getId())){
			${className}.preInsert();
			dao.insert(${className});

			String procIns = actTaskService.startProcess("${className}", businessTable, ${className}.getId(), variables);

			logger.debug("流程已启动，流程ID："+ procIns);

			return "流程已启动，流程ID："+ procIns;
		}

		// 重新编辑申请
		else{
			${className}.preUpdate();
			dao.update(${className});

			${className}.getAct().setComment(${className}.getAct().isPass()?"[重申] ":"[销毁] " + ${className}.getAct().getComment());

			// 完成流程任务
			variables.put("auditPass", ${className}.getAct().isPass());
			actTaskService.complete(${className}.getAct().getTaskId(), ${className}.getAct().getProcInsId(), ${className}.getAct().getComment(), variables);

            return "流程已" + (${className}.getAct().isPass()?"[重申] ":"[销毁] ");
		}
	}

	@Transactional(readOnly = false)
	public String auditSave(${ClassName} ${className}) {

		// 设置意见
		${className}.getAct().setComment((${className}.getAct().isPass()?"[同意] ":"[驳回] ")+${className}.getAct().getComment());
		${className}.preUpdate();

		// 对不同环节的业务逻辑进行操作
		String taskDefKey = ${className}.getAct().getTaskDefKey();
        // 流程变量，设置分支条件的变量值
		Map<String, Object> vars = Maps.newHashMap();

        // TODO taskDefKey对应流程XML文件中userTask id
        // TODO 下面的审批环节需要根据不同的业务需求进行修改，可以参考请假流程Demo
		// 审批环节1
		if ("audit1".equals(taskDefKey)){
//			leave.setDeptLeadText(leave.getAct().getComment());
//			dao.updateLeadText(leave);
		}
		// 审批环节2
		else if ("audit2".equals(taskDefKey)){
//			leave.setHrText(leave.getAct().getComment());
//			dao.updateHRText(leave);
		}
		// 重新修改
		else if ("modifyApply".equals(taskDefKey)){
//			dao.update(${className});
		}

		// 未知环节，直接返回
		else{
			return "未知环节";
		}

        vars.put("auditPass", ${className}.getAct().isPass());
		// 提交流程任务

		actTaskService.complete(${className}.getAct().getTaskId(), ${className}.getAct().getProcInsId(), ${className}.getAct().getComment(), vars);

		return "处理成功";
	}

}]]>
	</content>
</template>