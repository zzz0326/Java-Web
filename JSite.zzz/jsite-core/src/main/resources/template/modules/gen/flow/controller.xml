<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2017-2019 <a href="https://gitee.com/lruijun/JSite">JSite</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.google.common.collect.Maps;
import com.jsite.common.config.Global;
import com.jsite.common.lang.StringUtils;
import com.jsite.common.web.BaseController;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import java.util.Map;

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

 /**
 * ${functionName}Controller
 * @author liuruijun
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	private Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	protected ${ClassName}Service ${className}Service;

	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id){
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}

	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"form"})
	public String form(${ClassName} ${className}, Model model) {
		String view = "${className}Form";
		if (StringUtils.isNotBlank(${className}.getId())){
			String taskDefKey = ${className}.getAct().getTaskDefKey();

			// 查看工单
			if (${className}.getAct().isFinishTask()) {
				view = "${className}View";
			}

            // 调整申请
			else if ("modifyApply".equals(taskDefKey)) {
				view = "${className}Form";
			}

			// 审核环节
			else {
				view = "${className}Audit";
			}
		}

		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${flowPrefix}/" + view;
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save", method = RequestMethod.POST)
	@ResponseBody
	public String save(${ClassName} ${className}) {
		try {
			Map<String, Object> variables = Maps.newHashMap();

			String message = ${className}Service.save(${className}, variables);

			return renderResult(Global.TRUE, message);
		} catch (Exception e) {
			e.printStackTrace();
		}
        return renderResult(Global.FALSE, "系统内部错误！");
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "saveAudit")
	@ResponseBody
	public String saveAudit(${ClassName} ${className}, Model model) {
		String message = ${className}Service.auditSave(${className});
		return renderResult(Global.TRUE, message);
	}
}]]>
	</content>
</template>